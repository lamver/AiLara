<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;
use Wnikk\LaravelAccessRules\Models\Owner;

/**
 * Class Rbac
 *
 * The Rbac class handles role-based access control (RBAC) for user permissions.
 *
 * @package Your\Namespace
 */
class Rbac
{

    /**
     * @param string $role
     */
    protected string $role = "";

    /**
     * Handles the request.
     *
     * @param Request $request The incoming request.
     * @param Closure $next The closure representing the next middleware in the pipeline.
     * @param string $role The role that needs to be checked for permission.
     * @return Response Returns the response generated by the next middleware in the pipeline.
     */
    public function handle(Request $request, Closure $next, string $role): Response
    {
        $this->role = $role;
        if ($this->userHasInvalidPermissions()) {
            abort(403);
        }
        return $next($request);
    }

    /**
     * Check if the currently authenticated user has invalid permissions.
     *
     * @return bool True if the user has invalid permissions, false otherwise.
     */
    protected function userHasInvalidPermissions(): bool
    {
        return (Auth::check() && !$this->checkUserPermission());
    }

    /**
     * Checks if the authenticated user has the necessary permissions.
     *
     * @return bool Returns true if the authenticated user has the necessary permissions, false otherwise.
     */
    protected function checkUserPermission(): bool
    {
        return true;
        $owner = Owner::where("original_id", $this->role)->first();

        if (!$owner) {
            abort(403);
        }
        foreach ($owner->permission as $permission) {
            if (Auth::user()->hasPermission($permission->rule->guard_name)) {
                return true;
            }
        }

        return false;
    }
}
